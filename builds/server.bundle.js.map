{"version":3,"sources":["webpack:///./game-server/fsg.js","webpack:///./game-server/game.js","webpack:///./game-server/index.js"],"names":["this","msg","JSON","parse","stringify","globals","action","originalGame","game","nextGame","isNewGame","markedForDelete","nextTimeLimit","kickedPlayers","Object","keys","rules","length","error","state","players","prev","next","events","type","cb","id","player","name","timelimit","kick","finish","killGame","log","push","key","value","userid","rule","obj","seconds","Math","min","max","defaultGame","cells","startPlayer","bestOf","maxPlayers","fsg","setGame","checkNewRound","payload","playerLeave","user","playerCount","newRound","otherPlayerId","selectNextPlayer","otherPlayer","setWinner","cellid","cell","event","checkWinner","playerList","floor","random","remaining","filter","x","check","checkNoneEmpty","filtered","v","setTie","strip","first","clearEvents","findPlayerWithType","pick","setTimeLimit","on","submit"],"mappings":"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","file":"server.bundle.js","sourcesContent":["\r\nclass FSG {\r\n    constructor() {\r\n        this.msg = JSON.parse(JSON.stringify(globals.action()));\r\n        this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        this.isNewGame = false;\r\n        this.markedForDelete = false;\r\n        this.nextTimeLimit = 0;\r\n        this.kickedPlayers = [];\r\n\r\n        if (!this.nextGame || Object.keys(this.nextGame.rules).length == 0) {\r\n            this.isNewGame = true;\r\n            this.error('Missing Rules');\r\n        }\r\n\r\n        if (this.nextGame) {\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            //if (!('events' in this.nextGame)) {\r\n            this.nextGame.events = [];\r\n            //}\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n        if (this.msg.type != type) {\r\n            if (type == 'newgame' && this.isNewGame) {\r\n                cb(this.msg);\r\n\r\n                // this.nextGame = Object.assign({}, defaultGame, { players: this.nextGame.players })\r\n            }\r\n            return;\r\n        }\r\n\r\n        cb(this.msg);\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = { name: player.name }\r\n        }\r\n        //game.players = Object.assign({}, game.players, this.nextGame.players)\r\n        this.nextGame = game;\r\n    }\r\n\r\n    submit() {\r\n        if (this.nextGame.next) {\r\n            this.nextGame.next.timelimit = this.nextTimeLimit;\r\n            if (this.markedForDelete)\r\n                delete this.nextGame.next['timelimit'];\r\n        }\r\n\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    killGame() {\r\n        this.markedForDelete = true;\r\n        globals.killGame();\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    action() {\r\n        return this.msg;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    setTimeLimit(seconds) {\r\n        this.nextTimeLimit = Math.min(60, Math.max(10, seconds));\r\n    }\r\n\r\n    event(name) {\r\n        this.nextGame.events.push(name);\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = [];\r\n    }\r\n    events(name) {\r\n        if (typeof name === 'undefined')\r\n            return this.nextGame.events;\r\n        this.nextGame.events.push(name);\r\n    }\r\n}\r\n\r\nexport default new FSG();","import fsg from './fsg';\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        cells: ['', '', '', '', '', '', '', '', ''],\r\n        startPlayer: ''\r\n    },\r\n    players: {},\r\n    rules: {\r\n        bestOf: 5,\r\n        maxPlayers: 2\r\n    },\r\n    next: {},\r\n    events: []\r\n}\r\n\r\nclass Tictactoe {\r\n\r\n    onNewGame() {\r\n        fsg.setGame(defaultGame);\r\n        this.checkNewRound();\r\n    }\r\n\r\n    onSkip() {\r\n        let action = fsg.action();\r\n        let next = fsg.next();\r\n        let id = action.payload.id;\r\n        if (!id) {\r\n            id = next.id;\r\n        }\r\n\r\n        this.playerLeave(id);\r\n    }\r\n\r\n    onJoin() {\r\n        let action = fsg.action();\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        // if (fsg.players(action.user.id).type)\r\n        //     return;\r\n\r\n        this.checkNewRound();\r\n    }\r\n\r\n    checkNewRound() {\r\n        //if player count reached required limit, start the game\r\n        let maxPlayers = fsg.rules('maxPlayers') || 2;\r\n        let playerCount = fsg.playerCount();\r\n        if (playerCount >= maxPlayers) {\r\n            this.newRound();\r\n        }\r\n    }\r\n\r\n    onLeave() {\r\n        let action = fsg.action();\r\n        this.playerLeave(action.user.id);\r\n    }\r\n\r\n    playerLeave(id) {\r\n        let players = fsg.players();\r\n        let otherPlayerId = null;\r\n        if (players[id]) {\r\n            otherPlayerId = this.selectNextPlayer(id);\r\n            delete players[id];\r\n        }\r\n\r\n        if (otherPlayerId) {\r\n            let otherPlayer = players[otherPlayerId];\r\n            this.setWinner(otherPlayer.type, 'forfeit')\r\n        }\r\n    }\r\n\r\n    onPick() {\r\n        let state = fsg.state();\r\n        let action = fsg.action();\r\n        let user = fsg.players(action.user.id);\r\n\r\n        //get the picked cell\r\n        let cellid = action.payload.cell;\r\n        let cell = state.cells[cellid];\r\n\r\n        // block picking cells with markings, and send error\r\n        if (cell.length > 0) {\r\n            fsg.next({\r\n                id: action.user.id,\r\n                action: 'pick',\r\n                error: 'NOT_EMPTY'\r\n            })\r\n            return;\r\n        }\r\n\r\n        //mark the selected cell\r\n        let type = user.type;\r\n        let id = action.user.id;\r\n        state.cells[cellid] = type;\r\n\r\n        fsg.event('picked');\r\n        fsg.prev({\r\n            cellid, id\r\n        })\r\n\r\n        if (this.checkWinner()) {\r\n            return;\r\n        }\r\n\r\n        this.selectNextPlayer();\r\n    }\r\n\r\n    newRound() {\r\n        let playerList = fsg.playerList();\r\n\r\n        let state = fsg.state();\r\n        //select the starting player\r\n        if (!state.startPlayer || state.startPlayer.length == 0) {\r\n            state.startPlayer = this.selectNextPlayer(playerList[Math.floor(Math.random() * playerList.length)]);\r\n        }\r\n        else {\r\n            state.startPlayer = this.selectNextPlayer(state.startPlayer);\r\n        }\r\n\r\n        //set the starting player, and set type for other player\r\n        let players = fsg.players();\r\n        for (var id in players)\r\n            players[id].type = 'O';\r\n        players[state.startPlayer].type = 'X';\r\n    }\r\n\r\n    selectNextPlayer(userid) {\r\n        let action = fsg.action();\r\n        let players = fsg.playerList();\r\n        userid = userid || action.user.id;\r\n        //only 2 players so just filter the current player\r\n        let remaining = players.filter(x => x != userid);\r\n        fsg.next({\r\n            id: remaining[0],\r\n            action: 'pick'\r\n        });\r\n        return remaining[0];\r\n    }\r\n\r\n\r\n    // Check each strip that makes a win\r\n    //      0  |  1  |  2\r\n    //    -----------------\r\n    //      3  |  4  |  5\r\n    //    -----------------\r\n    //      6  |  7  |  8\r\n    checkWinner() {\r\n        if (this.check([0, 1, 2])) return true;\r\n        if (this.check([3, 4, 5])) return true;\r\n        if (this.check([6, 7, 8])) return true;\r\n        if (this.check([0, 3, 6])) return true;\r\n        if (this.check([1, 4, 7])) return true;\r\n        if (this.check([2, 5, 8])) return true;\r\n        if (this.check([0, 4, 8])) return true;\r\n        if (this.check([6, 4, 2])) return true;\r\n        if (this.checkNoneEmpty()) return true;\r\n        return false;\r\n    }\r\n\r\n    checkNoneEmpty() {\r\n        let cells = fsg.state().cells;\r\n        let filtered = cells.filter(v => v == '');\r\n\r\n        if (filtered.length == 0) {\r\n            this.setTie();\r\n        }\r\n        return filtered.length == 0;\r\n    }\r\n\r\n    // checks if a strip has matching types\r\n    check(strip) {\r\n        let cells = fsg.state().cells;\r\n        let first = cells[strip[0]];\r\n        if (first == '')\r\n            return false;\r\n        let filtered = strip.filter(id => cells[id] == first);\r\n        if (filtered.length == 3 && filtered.length == strip.length) {\r\n            this.setWinner(first, strip);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findPlayerWithType(type) {\r\n        let players = fsg.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (player.type == type)\r\n                return id;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    setTie() {\r\n        fsg.clearEvents();\r\n        fsg.event('tie')\r\n        fsg.next({});\r\n        fsg.prev({})\r\n\r\n        fsg.killGame();\r\n    }\r\n    // set the winner event and data\r\n    setWinner(type, strip) {\r\n        //find user who matches the win type\r\n        let userid = this.findPlayerWithType(type);\r\n        let player = fsg.players(userid);\r\n        if (!player) {\r\n            player.id = 'unknown player';\r\n        }\r\n        fsg.clearEvents();\r\n        fsg.event('winner')\r\n        fsg.prev({\r\n            pick: type,\r\n            strip: strip,\r\n            id: userid\r\n        })\r\n        fsg.next({});\r\n\r\n        fsg.killGame();\r\n    }\r\n}\r\n\r\nexport default new Tictactoe();","import fsg from './fsg';\r\nimport tictactoe from './game';\r\n\r\nfsg.setTimeLimit(20);\r\n\r\nfsg.on('newgame', () => tictactoe.onNewGame());\r\nfsg.on('skip', () => tictactoe.onSkip());\r\nfsg.on('join', () => tictactoe.onJoin());\r\nfsg.on('leave', () => tictactoe.onLeave());\r\nfsg.on('pick', () => tictactoe.onPick());\r\n\r\nfsg.submit();"],"sourceRoot":""}