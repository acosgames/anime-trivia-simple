{"version":3,"sources":["webpack:///./game-server/fsg.js","webpack:///./game-server/game.js","webpack:///./game-server/index.js"],"names":["this","actions","JSON","parse","stringify","globals","e","error","originalGame","game","nextGame","currentAction","isNewGame","markedForDelete","defaultSeconds","kickedPlayers","Object","keys","rules","length","timer","state","players","prev","next","events","type","cb","i","id","player","name","kick","finish","killGame","msg","log","push","database","key","value","userid","rule","obj","seconds","set","Math","min","max","action","timeleft","questions","fsg","defaultGame","qid","history","category","question","choices","round","rounds","maxplayers","setGame","checkStartGame","nextRound","user","points","choice","payload","_choice","event","picked","maxPlayers","playerCount","processCorrectAnswers","setTimelimit","resetPlayerChoices","processWinners","processNextQuestion","floor","random","includes","q","c","t","a","sort","playerList","b","winners","on","submit"],"mappings":"mBAwNA,YAvNA,MACI,cACI,IACIA,KAAKC,QAAUC,KAAKC,MAAMD,KAAKE,UAAUC,QAAQJ,YAErD,MAAOK,GAA2C,YAAtCN,KAAKO,MAAM,0BACvB,IACIP,KAAKQ,aAAeN,KAAKC,MAAMD,KAAKE,UAAUC,QAAQI,SAE1D,MAAOH,GAAgD,YAA3CN,KAAKO,MAAM,+BACvB,IACIP,KAAKU,SAAWR,KAAKC,MAAMD,KAAKE,UAAUC,QAAQI,SAEtD,MAAOH,GAA4C,YAAvCN,KAAKO,MAAM,2BAGvBP,KAAKW,cAAgB,KAErBX,KAAKY,WAAY,EACjBZ,KAAKa,iBAAkB,EACvBb,KAAKc,eAAiB,GAEtBd,KAAKe,cAAgB,GAEhBf,KAAKU,UAAuD,GAA3CM,OAAOC,KAAKjB,KAAKU,SAASQ,OAAOC,SACnDnB,KAAKY,WAAY,EACjBZ,KAAKO,MAAM,kBAGXP,KAAKU,WACC,UAAWV,KAAKU,WAClBV,KAAKU,SAASU,MAAQ,IAEpB,UAAWpB,KAAKU,WAClBV,KAAKU,SAASW,MAAQ,IAGpB,YAAarB,KAAKU,WACpBV,KAAKU,SAASY,QAAU,IAI5BtB,KAAKU,SAASa,KAAO,GAGf,SAAUvB,KAAKU,WACjBV,KAAKU,SAASc,KAAO,IAGnB,UAAWxB,KAAKU,WAClBV,KAAKU,SAASQ,MAAQ,IAI1BlB,KAAKU,SAASe,OAAS,IAQ/B,GAAGC,EAAMC,GAEL,GAAY,WAARD,EAYJ,IAAK,IAAIE,EAAI,EAAGA,EAAI5B,KAAKC,QAAQkB,OAAQS,IACjC5B,KAAKC,QAAQ2B,GAAGF,MAAQA,IACxB1B,KAAKW,cAAgBX,KAAKC,QAAQ2B,GAClCD,EAAG3B,KAAKW,qBAdRX,KAAKY,YACLZ,KAAKW,cAAgBX,KAAKC,QAAQ,GAClC0B,EAAG3B,KAAKC,QAAQ,IAChBD,KAAKY,WAAY,GAkB7B,QAAQH,GACJ,IAAK,IAAIoB,KAAM7B,KAAKU,SAASY,QAAS,CAClC,IAAIQ,EAAS9B,KAAKU,SAASY,QAAQO,GACnCpB,EAAKa,QAAQO,GAAM,CAAEE,KAAMD,EAAOC,MAGtC/B,KAAKU,SAAWD,EAGpB,SAcQT,KAAKe,cAAcI,OAAS,IAC5BnB,KAAKU,SAASsB,KAAOhC,KAAKe,eAE9BV,QAAQ4B,OAAOjC,KAAKU,UAGxB,WACIV,KAAKa,iBAAkB,EACvBR,QAAQ6B,WAGZ,IAAIC,GACA9B,QAAQ+B,IAAID,GAEhB,MAAMA,GACF9B,QAAQE,MAAM4B,GAGlB,WAAWN,GACP7B,KAAKe,cAAcsB,KAAKR,GAG5B,WACI,OAAOxB,QAAQiC,WAGnB,SACI,OAAOtC,KAAKW,cAGhB,MAAM4B,EAAKC,GAEP,YAAmB,IAARD,EACAvC,KAAKU,SAASW,WACJ,IAAVmB,EACAxC,KAAKU,SAASW,MAAMkB,QAE/BvC,KAAKU,SAASW,MAAMkB,GAAOC,GAG/B,aACI,OAAOxB,OAAOC,KAAKjB,KAAKU,SAASY,SAErC,cACI,OAAON,OAAOC,KAAKjB,KAAKU,SAASY,SAASH,OAG9C,QAAQsB,EAAQD,GACZ,YAAsB,IAAXC,EACAzC,KAAKU,SAASY,aACJ,IAAVkB,EACAxC,KAAKU,SAASY,QAAQmB,QAEjCzC,KAAKU,SAASY,QAAQmB,GAAUD,GAGpC,MAAME,EAAMF,GACR,YAAoB,IAATE,EACA1C,KAAKU,SAASQ,WACJ,IAAVsB,EACAxC,KAAKU,SAASQ,MAAMwB,QAE/B1C,KAAKU,SAASQ,MAAMwB,GAAQF,GAGhC,KAAKG,GAID,MAHmB,iBAARA,IACP3C,KAAKU,SAASa,KAAOoB,GAElB3C,KAAKU,SAASa,KAGzB,KAAKoB,GAID,MAHmB,iBAARA,IACP3C,KAAKU,SAASc,KAAOmB,GAElB3C,KAAKU,SAASc,KAGzB,aAAaoB,GACTA,EAAUA,GAAW5C,KAAKc,eACrBd,KAAKU,SAASU,QACfpB,KAAKU,SAASU,MAAQ,IAC1BpB,KAAKU,SAASU,MAAMyB,IAAMC,KAAKC,IAAI,GAAID,KAAKE,IAAI,GAAIJ,IAGxD,iBAAiBK,GACb,YAA8B,IAAnBA,EAAOC,UAEXD,EAAOC,UAAY,EAG9B,MAAMnB,GACF/B,KAAKU,SAASe,OAAOY,KAAKN,GAG9B,cACI/B,KAAKU,SAASe,OAAS,GAE3B,OAAOM,GACH,QAAoB,IAATA,EACP,OAAO/B,KAAKU,SAASe,OACzBzB,KAAKU,SAASe,OAAOY,KAAKN,KClNlC,IAAIoB,EAAYC,EAAId,WAEhBe,EAAc,CACdhC,MAAO,CACHiC,IAAK,EACLC,QAAS,GACTC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,MAAO,GAEXrC,QAAS,GACTJ,MAAO,CACH0C,OAAQ,EACRC,WAAY,GAEhBrC,KAAM,GACNC,OAAQ,IA2MZ,YAtMA,MAEI,UAAUwB,GACNG,EAAIU,QAAQT,GACZrD,KAAK+D,iBAGT,OAAOd,GAEHjD,KAAKgE,YAGT,OAAOf,GACH,IAAKA,EAAOgB,KAAKpC,GACb,OAEJ,IAAIoC,EAAOb,EAAI9B,QAAQ2B,EAAOgB,KAAKpC,IAC9BoC,IAILA,EAAKC,OAAS,EAEdlE,KAAK+D,kBAKT,QAAQd,GACJ,IAAIpB,EAAKoB,EAAOgB,KAAKpC,GACjBP,EAAU8B,EAAI9B,UACdA,EAAQO,WACDP,EAAQO,GAIvB,OAAOoB,GAQH,IAAI5B,EAAQ+B,EAAI/B,QACZ4C,EAAOb,EAAI9B,QAAQ2B,EAAOgB,KAAKpC,IAG/BsC,EAASlB,EAAOmB,QAAQD,OAExBA,EAAS,GAAKA,EAAS9C,EAAMqC,QAAQvC,SAGzC8C,EAAKI,QAAUF,EAEff,EAAIkB,MAAM,UACVjD,EAAMkD,OAASN,EAAKpC,IAIxB,iBAEI,IAAI2C,EAAapB,EAAIlC,MAAM,eAAiB,EAE5C,GADkBkC,EAAIqB,eACHD,EAAY,CAC3B,IAAIlD,EAAU8B,EAAI9B,UAClB,IAAK,IAAIO,KAAMP,EACXA,EAAQO,GAAIqC,OAAS,EAEzBlE,KAAKgE,aAIb,YACIhE,KAAK0E,wBAEL,IAAIrD,EAAQ+B,EAAI/B,QAChBA,EAAMsC,MAAQtC,EAAMsC,MAAQ,EAC5BP,EAAI5B,KAAK,CACLK,GAAI,MAERuB,EAAIuB,aAAa,GAEjB3E,KAAK4E,qBAEL,IAAI1D,EAAQkC,EAAIlC,QACZG,EAAMsC,MAAQzC,EAAM0C,OACpB5D,KAAK6E,iBAIT7E,KAAK8E,sBAGT,qBACI,IAAIxD,EAAU8B,EAAI9B,UAClB,IAAK,IAAIO,KAAMP,EAAS,CACpB,IAAIQ,EAASR,EAAQO,GACrBC,EAAO4B,QAAU5B,EAAO4B,SAAW,QACL,IAAnB5B,EAAOuC,SAA6C,MAAlBvC,EAAOuC,SAChDvC,EAAO4B,QAAQrB,KAAKP,EAAOuC,gBACxBvC,EAAOuC,SAItB,sBACI,IAAIhD,EAAQ+B,EAAI/B,QAGZiC,EAAMR,KAAKiC,MAAMjC,KAAKkC,SAAW7B,EAAUhC,QAC/C,GAAIE,EAAMkC,QAAQ0B,SAAS3B,GAEvB,YADAtD,KAAK8E,sBAKT,IAAIrB,EAAWN,EAAUG,GAIzB,GAHAjC,EAAMiC,IAAMA,EACZjC,EAAMoC,SAAWA,EAASyB,EAC1B7D,EAAMmC,SAAWC,EAAS0B,EACR,WAAd1B,EAAS2B,EAET/D,EAAMqC,QAAU,CAAC,OAAQ,aAExB,CAEDrC,EAAMqC,QAAU,GAChBrC,EAAMqC,QAAQrB,KAAKoB,EAAS4B,GAC5B,IAAK,IAAIzD,EAAI,EAAGA,EAAI6B,EAAS7B,EAAET,OAAQS,IACnCP,EAAMqC,QAAQrB,KAAKoB,EAAS7B,EAAEA,IAElCP,EAAMqC,QAAQ4B,OAGlBjE,EAAMkC,QAAQlB,KAAKiB,GAGvB,iBACI,IAAIiC,EAAa,GAEbjE,EAAU8B,EAAI9B,UAGlB,IAAK,IAAIO,KAAMP,EACXA,EAAQO,GAAIA,GAAKA,EACjB0D,EAAWlD,KAAKf,EAAQO,IAI5B0D,EAAWD,MAAK,CAACD,EAAGG,KAChBH,EAAEnB,OAASsB,EAAEtB,UAIjB,IAAIuB,EAAU,GACd,IAAK,IAAI7D,EAAI,EAAGA,EAAIkB,KAAKC,IAAIwC,EAAWpE,OAAQ,IAAKS,IAAK,CACtD,IAAIE,EAASyD,EAAW3D,GACxB6D,EAAQpD,KAAKP,EAAOD,IAIxB,IAAK,IAAIA,KAAMP,SACJA,EAAQO,GAAQ,GAGfuB,EAAI/B,QACVoE,QAAUA,EAChBrC,EAAI3B,OAAO,UAEX2B,EAAIlB,WAGR,wBACI,IAAIZ,EAAU8B,EAAI9B,UACdD,EAAQ+B,EAAI/B,QAChB,KAAIA,EAAMsC,OAAS,GAInB,IAAK,IAAI9B,KAAMP,EAAS,CACpB,IAAIQ,EAASR,EAAQO,QACQ,IAAlBC,EAAOuC,SAA4C,MAAlBvC,EAAOuC,UAGtClB,EAAU9B,EAAMiC,KAAK+B,GACjBhE,EAAMqC,QAAQ5B,EAAOuC,SAElCvC,EAAOoC,QAAU,GAGjBpC,EAAOoC,QAAU,MCjNjCd,EAAIsC,GAAG,WAAYzC,GAAW,YAAoBA,KAClDG,EAAIsC,GAAG,QAASzC,GAAW,SAAiBA,KAC5CG,EAAIsC,GAAG,QAASzC,GAAW,SAAiBA,KAC5CG,EAAIsC,GAAG,SAAUzC,GAAW,UAAkBA,KAC9CG,EAAIsC,GAAG,QAASzC,GAAW,SAAiBA,KAE5CG,EAAIuC,U","file":"server.bundle.js","sourcesContent":["\r\nclass FSG {\r\n    constructor() {\r\n        try {\r\n            this.actions = JSON.parse(JSON.stringify(globals.actions()));\r\n        }\r\n        catch (e) { this.error('Failed to load actions'); return }\r\n        try {\r\n            this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load originalGame'); return }\r\n        try {\r\n            this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load nextGame'); return }\r\n\r\n\r\n        this.currentAction = null;\r\n\r\n        this.isNewGame = false;\r\n        this.markedForDelete = false;\r\n        this.defaultSeconds = 15;\r\n        // this.nextTimeLimit = -1;\r\n        this.kickedPlayers = [];\r\n\r\n        if (!this.nextGame || Object.keys(this.nextGame.rules).length == 0) {\r\n            this.isNewGame = true;\r\n            this.error('Missing Rules');\r\n        }\r\n\r\n        if (this.nextGame) {\r\n            if (!('timer' in this.nextGame)) {\r\n                this.nextGame.timer = {};\r\n            }\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            //if (!('events' in this.nextGame)) {\r\n            this.nextGame.events = [];\r\n            //}\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n\r\n        if (type == 'newgame') {\r\n            if (this.isNewGame) {\r\n                this.currentAction = this.actions[0];\r\n                cb(this.actions[0]);\r\n                this.isNewGame = false;\r\n            }\r\n\r\n            return;\r\n            //return;\r\n            // this.nextGame = Object.assign({}, defaultGame, { players: this.nextGame.players })\r\n        }\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            if (this.actions[i].type == type) {\r\n                this.currentAction = this.actions[i];\r\n                cb(this.currentAction);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = { name: player.name }\r\n        }\r\n        //game.players = Object.assign({}, game.players, this.nextGame.players)\r\n        this.nextGame = game;\r\n    }\r\n\r\n    submit() {\r\n        // if (this.nextGame.timer && this.nextTimeLimit > -1) {\r\n        //     this.nextGame.timer.timelimit = this.nextTimeLimit;\r\n        //     // if (this.markedForDelete)\r\n        //     //     delete this.nextGame.next['timelimit'];\r\n        // }\r\n\r\n        //if next info has been updated, we force a new timer\r\n        // let prevNextUser = JSON.stringify(this.originalGame.next);\r\n        // let curNextUser = JSON.stringify(this.nextGame.next);\r\n        // if (prevNextUser != curNextUser && typeof this.nextGame.timer.set == 'undefined') {\r\n        //     this.setTimelimit()\r\n        // }\r\n\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    killGame() {\r\n        this.markedForDelete = true;\r\n        globals.killGame();\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    database() {\r\n        return globals.database();\r\n    }\r\n\r\n    action() {\r\n        return this.currentAction;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    setTimelimit(seconds) {\r\n        seconds = seconds || this.defaultSeconds;\r\n        if (!this.nextGame.timer)\r\n            this.nextGame.timer = {};\r\n        this.nextGame.timer.set = Math.min(60, Math.max(10, seconds));\r\n    }\r\n\r\n    reachedTimelimit(action) {\r\n        if (typeof action.timeleft == 'undefined')\r\n            return false;\r\n        return action.timeleft <= 0;\r\n    }\r\n\r\n    event(name) {\r\n        this.nextGame.events.push(name);\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = [];\r\n    }\r\n    events(name) {\r\n        if (typeof name === 'undefined')\r\n            return this.nextGame.events;\r\n        this.nextGame.events.push(name);\r\n    }\r\n}\r\n\r\nexport default new FSG();","import fsg from './fsg';\r\n\r\nlet questions = fsg.database();\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        qid: 0,\r\n        history: [],\r\n        category: '',\r\n        question: '',\r\n        choices: [],\r\n        round: 0\r\n    },\r\n    players: {},\r\n    rules: {\r\n        rounds: 2,\r\n        maxplayers: 2\r\n    },\r\n    next: {},\r\n    events: []\r\n}\r\n\r\n\r\n\r\nclass PopTrivia {\r\n\r\n    onNewGame(action) {\r\n        fsg.setGame(defaultGame);\r\n        this.checkStartGame();\r\n    }\r\n\r\n    onSkip(action) {\r\n        //if (fsg.reachedTimelimit(action))\r\n        this.nextRound();\r\n    }\r\n\r\n    onJoin(action) {\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        let user = fsg.players(action.user.id);\r\n        if (!user)\r\n            return;\r\n\r\n        //new player defaults\r\n        user.points = 0;\r\n\r\n        this.checkStartGame();\r\n    }\r\n\r\n\r\n\r\n    onLeave(action) {\r\n        let id = action.user.id;\r\n        let players = fsg.players();\r\n        if (players[id]) {\r\n            delete players[id];\r\n        }\r\n    }\r\n\r\n    onPick(action) {\r\n\r\n        // if (fsg.reachedTimelimit(action)) {\r\n        //     this.nextRound();\r\n        //     fsg.log(\"Pick passed timelimit, getting new round\");\r\n        //     return;\r\n        // }\r\n\r\n        let state = fsg.state();\r\n        let user = fsg.players(action.user.id);\r\n\r\n        //get the picked cell\r\n        let choice = action.payload.choice;\r\n\r\n        if (choice < 0 || choice > state.choices.length)\r\n            return;\r\n\r\n        user._choice = choice;\r\n\r\n        fsg.event('picked');\r\n        state.picked = user.id;\r\n    }\r\n\r\n\r\n    checkStartGame() {\r\n        //if player count reached required limit, start the game\r\n        let maxPlayers = fsg.rules('maxPlayers') || 2;\r\n        let playerCount = fsg.playerCount();\r\n        if (playerCount >= maxPlayers) {\r\n            let players = fsg.players();\r\n            for (var id in players)\r\n                players[id].points = 0;\r\n\r\n            this.nextRound();\r\n        }\r\n    }\r\n\r\n    nextRound() {\r\n        this.processCorrectAnswers();\r\n\r\n        let state = fsg.state();\r\n        state.round = state.round + 1;\r\n        fsg.next({\r\n            id: '*',\r\n        })\r\n        fsg.setTimelimit(5);\r\n\r\n        this.resetPlayerChoices();\r\n\r\n        let rules = fsg.rules();\r\n        if (state.round > rules.rounds) {\r\n            this.processWinners();\r\n            return;\r\n        }\r\n\r\n        this.processNextQuestion();\r\n    }\r\n\r\n    resetPlayerChoices() {\r\n        let players = fsg.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            player.choices = player.choices || [];\r\n            if (typeof player._choice !== 'undefined' && player._choice != null)\r\n                player.choices.push(player._choice);\r\n            delete player._choice;\r\n        }\r\n    }\r\n\r\n    processNextQuestion() {\r\n        let state = fsg.state();\r\n\r\n        //find a random question not asked before\r\n        let qid = Math.floor(Math.random() * questions.length);\r\n        if (state.history.includes(qid)) {\r\n            this.processNextQuestion();\r\n            return;\r\n        }\r\n\r\n        //setup next question\r\n        let question = questions[qid];\r\n        state.qid = qid;\r\n        state.question = question.q;\r\n        state.category = question.c;\r\n        if (question.t == 'boolean') {\r\n            //always True then False in the choices\r\n            state.choices = ['True', 'False']\r\n        }\r\n        else {\r\n            //sort the choices alphabetically\r\n            state.choices = [];\r\n            state.choices.push(question.a);\r\n            for (let i = 0; i < question.i.length; i++) {\r\n                state.choices.push(question.i[i]);\r\n            }\r\n            state.choices.sort();\r\n        }\r\n        //save this question in history to avoid choosing again\r\n        state.history.push(qid);\r\n    }\r\n\r\n    processWinners() {\r\n        let playerList = [];\r\n        let playerIds = [];\r\n        let players = fsg.players();\r\n\r\n        //add player id into the player data\r\n        for (var id in players) {\r\n            players[id].id = id;\r\n            playerList.push(players[id]);\r\n        }\r\n\r\n        //sort all players by their points\r\n        playerList.sort((a, b) => {\r\n            a.points - b.points;\r\n        })\r\n\r\n        //get the top 10\r\n        let winners = [];\r\n        for (var i = 0; i < Math.min(playerList.length, 10); i++) {\r\n            let player = playerList[i];\r\n            winners.push(player.id);\r\n        }\r\n\r\n        //remove id, so we don't send over network\r\n        for (var id in players) {\r\n            delete players[id]['id'];\r\n        }\r\n\r\n        let state = fsg.state();\r\n        state.winners = winners;\r\n        fsg.events('winner');\r\n\r\n        fsg.killGame();\r\n    }\r\n\r\n    processCorrectAnswers() {\r\n        let players = fsg.players();\r\n        let state = fsg.state();\r\n        if (state.round <= 0)\r\n            return;\r\n\r\n        //award points for correct choices, remove points for wrong choices\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (typeof player._choice == 'undefined' || player._choice == null)\r\n                continue;\r\n\r\n            let answer = questions[state.qid].a;\r\n            let userChoice = state.choices[player._choice];\r\n            if (answer == userChoice) {\r\n                player.points += 10;\r\n            }\r\n            else {\r\n                player.points -= 2;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new PopTrivia();","import fsg from './fsg';\r\nimport PopTrivia from './game';\r\n\r\n\r\n\r\nfsg.on('newgame', (action) => PopTrivia.onNewGame(action));\r\nfsg.on('skip', (action) => PopTrivia.onSkip(action));\r\nfsg.on('join', (action) => PopTrivia.onJoin(action));\r\nfsg.on('leave', (action) => PopTrivia.onLeave(action));\r\nfsg.on('pick', (action) => PopTrivia.onPick(action));\r\n\r\nfsg.submit();"],"sourceRoot":""}