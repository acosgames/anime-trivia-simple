{"version":3,"file":"server.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sCAAsC;AAC1D;AACA;AACA;AACA,oBAAoB,2CAA2C;AAC/D;AACA;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjiEAAe,WAAW;;;;;;;;;;;;;;ACjN1B;AAC0B;AAC1B;AACA,gBAAgB,uDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe;AACf;AACA;AACA;AACA,KAAK;AACL,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAW;AACnB;AACA;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAQ;AAChB;AACA,SAAS;AACT;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B,qBAAqB,sDAAW;AAChC;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAS;AACjB;AACA;AACA;AACA,yBAAyB,yDAAc;AACvC;AACA,yBAAyB,sDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAqC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAS;AAC7B;AACA,QAAQ,uDAAY;AACpB;AACA;AACA;AACA,sBAAsB,sDAAW;AACjC,oBAAoB,oDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;UC/R/B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;;;;;;;;ACA0B;AACK;AAC/B;AACA;AACA;AACA,iDAAM,0BAA0B,uDAAmB;AACnD,iDAAM,qBAAqB,oDAAgB;AAC3C,iDAAM,qBAAqB,oDAAgB;AAC3C,iDAAM,sBAAsB,qDAAiB;AAC7C,iDAAM,qBAAqB,oDAAgB;AAC3C;AACA,qDAAU,G","sources":["../.././game-server/acosg.js","../.././game-server/game.js","../../webpack/bootstrap","../../webpack/runtime/define property getters","../../webpack/runtime/hasOwnProperty shorthand","../.././game-server/index.js"],"sourcesContent":["\r\nclass ACOSG {\r\n    constructor() {\r\n        try {\r\n            this.actions = JSON.parse(JSON.stringify(globals.actions()));\r\n        }\r\n        catch (e) { this.error('Failed to load actions'); return }\r\n        try {\r\n            this.originalGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load originalGame'); return }\r\n        try {\r\n            this.nextGame = JSON.parse(JSON.stringify(globals.game()));\r\n        }\r\n        catch (e) { this.error('Failed to load nextGame'); return }\r\n\r\n\r\n        this.currentAction = null;\r\n\r\n        this.isNewGame = false;\r\n        // this.markedForDelete = false;\r\n        this.defaultSeconds = 15;\r\n        // this.nextTimeLimit = -1;\r\n        this.kickedPlayers = [];\r\n\r\n        // if (!this.nextGame || !this.nextGame.rules || Object.keys(this.nextGame.rules).length == 0) {\r\n        //     this.isNewGame = true;\r\n        //     this.error('Missing Rules');\r\n        // }\r\n\r\n        if (this.nextGame) {\r\n            if (!('timer' in this.nextGame)) {\r\n                this.nextGame.timer = {};\r\n            }\r\n            if (!('state' in this.nextGame)) {\r\n                this.nextGame.state = {};\r\n            }\r\n\r\n            if (!('players' in this.nextGame)) {\r\n                this.nextGame.players = {};\r\n            }\r\n\r\n            //if (!('prev' in this.nextGame)) {\r\n            this.nextGame.prev = {};\r\n            //}\r\n\r\n            if (!('next' in this.nextGame)) {\r\n                this.nextGame.next = {};\r\n            }\r\n\r\n            if (!('rules' in this.nextGame)) {\r\n                this.nextGame.rules = {};\r\n            }\r\n\r\n            this.nextGame.events = {};\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    on(type, cb) {\r\n\r\n        // if (type == 'newgame') {\r\n        //     //if (this.isNewGame) {\r\n        //     this.currentAction = this.actions[0];\r\n        //     if (this.currentAction.type == '')\r\n        //         cb(this.actions[0]);\r\n        //     this.isNewGame = false;\r\n        //     //}\r\n\r\n        //     return;\r\n        // }\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            if (this.actions[i].type == type) {\r\n                this.currentAction = this.actions[i];\r\n                let result = cb(this.currentAction);\r\n                if (typeof result == \"boolean\" && !result) {\r\n                    this.ignore();\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ignore() {\r\n        globals.ignore();\r\n    }\r\n\r\n    setGame(game) {\r\n        for (var id in this.nextGame.players) {\r\n            let player = this.nextGame.players[id];\r\n            game.players[id] = player;\r\n        }\r\n        this.nextGame = game;\r\n    }\r\n\r\n    commit() {\r\n        if (this.kickedPlayers.length > 0)\r\n            this.nextGame.kick = this.kickedPlayers;\r\n\r\n        globals.finish(this.nextGame);\r\n    }\r\n\r\n    gameover(payload) {\r\n        this.event('gameover', payload);\r\n    }\r\n\r\n    log(msg) {\r\n        globals.log(msg);\r\n    }\r\n    error(msg) {\r\n        globals.error(msg);\r\n    }\r\n\r\n    kickPlayer(id) {\r\n        this.kickedPlayers.push(id);\r\n    }\r\n\r\n    database() {\r\n        return globals.database();\r\n    }\r\n\r\n    action() {\r\n        return this.currentAction;\r\n    }\r\n\r\n    state(key, value) {\r\n\r\n        if (typeof key === 'undefined')\r\n            return this.nextGame.state;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.state[key];\r\n\r\n        this.nextGame.state[key] = value;\r\n    }\r\n\r\n    playerList() {\r\n        return Object.keys(this.nextGame.players);\r\n    }\r\n    playerCount() {\r\n        return Object.keys(this.nextGame.players).length;\r\n    }\r\n\r\n    players(userid, value) {\r\n        if (typeof userid === 'undefined')\r\n            return this.nextGame.players;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.players[userid];\r\n\r\n        this.nextGame.players[userid] = value;\r\n    }\r\n\r\n    rules(rule, value) {\r\n        if (typeof rule === 'undefined')\r\n            return this.nextGame.rules;\r\n        if (typeof value === 'undefined')\r\n            return this.nextGame.rules[rule];\r\n\r\n        this.nextGame.rules[rule] = value;\r\n    }\r\n\r\n    prev(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.prev = obj;\r\n        }\r\n        return this.nextGame.prev;\r\n    }\r\n\r\n    next(obj) {\r\n        if (typeof obj === 'object') {\r\n            this.nextGame.next = obj;\r\n        }\r\n        return this.nextGame.next;\r\n    }\r\n\r\n    setTimelimit(seconds) {\r\n        seconds = seconds || this.defaultSeconds;\r\n        if (!this.nextGame.timer)\r\n            this.nextGame.timer = {};\r\n        this.nextGame.timer.set = seconds;// Math.min(60, Math.max(10, seconds));\r\n    }\r\n\r\n    reachedTimelimit(action) {\r\n        if (typeof action.timeleft == 'undefined')\r\n            return false;\r\n        return action.timeleft <= 0;\r\n    }\r\n\r\n    event(name, payload) {\r\n        if (!payload)\r\n            return this.nextGame.events[name];\r\n\r\n        this.nextGame.events[name] = payload || {};\r\n    }\r\n\r\n    clearEvents() {\r\n        this.nextGame.events = {};\r\n    }\r\n    // events(name) {\r\n    //     if (typeof name === 'undefined')\r\n    //         return this.nextGame.events;\r\n    //     this.nextGame.events.push(name);\r\n    // }\r\n}\r\n\r\nexport default new ACOSG();","\r\nimport cup from './acosg';\r\n\r\nlet questions = cup.database();\r\n\r\nlet defaultGame = {\r\n    state: {\r\n        _qid: 0,\r\n        _history: [],\r\n        category: '',\r\n        question: '',\r\n        choices: [],\r\n        round: 0,\r\n        stage: 0\r\n    },\r\n    players: {},\r\n    rules: {\r\n        rounds: 10,\r\n        maxplayers: 10\r\n    },\r\n    next: {},\r\n    events: {}\r\n}\r\n\r\n\r\n\r\nclass PopTrivia {\r\n\r\n    onNewGame(action) {\r\n        cup.setGame(defaultGame);\r\n        this.startGame();\r\n    }\r\n\r\n    startGame() {\r\n        let players = cup.players();\r\n        for (var id in players)\r\n            players[id].score = 0;\r\n\r\n        this.nextRound();\r\n    }\r\n\r\n    onSkip(action) {\r\n\r\n        let state = cup.state();\r\n        let stage = state.stage || 0;\r\n\r\n        switch (state.stage) {\r\n            case 0:\r\n                this.endOfRound();\r\n                break;\r\n            default:\r\n                this.nextRound();\r\n                break;\r\n        }\r\n        //if (cup.reachedTimelimit(action))\r\n\r\n    }\r\n\r\n    nextQuestion() {\r\n        cup.next({\r\n            id: '*',\r\n        })\r\n        this.processNextQuestion();\r\n\r\n        cup.setTimelimit(20);\r\n    }\r\n    endOfRound() {\r\n        let state = cup.state();\r\n        state.stage += 1;\r\n        this.processCorrectAnswers();\r\n        cup.setTimelimit(6);\r\n\r\n        let question = questions[state._qid];\r\n        // cup.event('a', question.a);\r\n        state.a = question.a;\r\n    }\r\n\r\n    nextRound() {\r\n        let state = cup.state();\r\n        let rules = cup.rules();\r\n        if (state.round >= rules.rounds) {\r\n            this.processWinners();\r\n            return;\r\n        }\r\n\r\n\r\n        state.round += 1;\r\n        state.stage = 0;\r\n\r\n        cup.event('q', state.round);\r\n        this.resetPlayerChoices();\r\n        this.nextQuestion();\r\n    }\r\n\r\n    onJoin(action) {\r\n        if (!action.user.id)\r\n            return;\r\n\r\n        let user = cup.players(action.user.id);\r\n        if (!user)\r\n            return;\r\n\r\n        //new player defaults\r\n        user.score = 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    onLeave(action) {\r\n        let id = action.user.id;\r\n        let players = cup.players();\r\n        // let playerList = cup.playerList();\r\n        let player = players[id];\r\n        if (player) {\r\n            player.score -= 1000;\r\n            player.forfeit = true;\r\n        }\r\n\r\n        let activeCount = 0;\r\n        for (var pid in players) {\r\n            if (!players[pid].forfeit)\r\n                activeCount++;\r\n        }\r\n        // if (players[id]) {\r\n        //     delete players[id];\r\n        // }\r\n        if (activeCount <= 1) {\r\n            this.processWinners();\r\n        }\r\n    }\r\n\r\n    onPick(action) {\r\n\r\n        // if (cup.reachedTimelimit(action)) {\r\n        //     this.nextRound();\r\n        //     cup.log(\"Pick passed timelimit, getting new round\");\r\n        //     return;\r\n        // }\r\n\r\n        let state = cup.state();\r\n        let player = cup.players(action.user.id);\r\n\r\n        //get the picked cell\r\n        let choice = action.payload.choice;\r\n\r\n        if (choice < 0 || choice > state.choices.length) {\r\n            cup.ignore();\r\n            return;\r\n        }\r\n\r\n\r\n        player.choice = choice;\r\n\r\n        cup.event('picked');\r\n        state.picked = player.id;\r\n\r\n        let voted = 0;\r\n        let playerList = cup.playerList();\r\n        for (var id of playerList) {\r\n            let player = cup.players(id);\r\n            if (player.choice != -1 && typeof player.choice !== 'undefined' && player.choice != null) {\r\n                voted++;\r\n            }\r\n        }\r\n\r\n        //end round\r\n        if (voted >= playerList.length) {\r\n            this.onSkip();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    resetPlayerChoices() {\r\n        let players = cup.players();\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            // player.choices = player.choices || [];\r\n            // if (typeof player._choice !== 'undefined' && player._choice != null)\r\n            //     player.choices.push(player._choice);\r\n            // else\r\n            //     player.choices.push(-1);\r\n            player.choice = -1;\r\n        }\r\n    }\r\n\r\n    processNextQuestion() {\r\n        let state = cup.state();\r\n\r\n        //find a random question not asked before\r\n        let _qid = Math.floor(Math.random() * questions.length);\r\n        if (state._history.includes(_qid)) {\r\n            this.processNextQuestion();\r\n            return;\r\n        }\r\n\r\n        //setup next question\r\n        let question = questions[_qid];\r\n        state._qid = _qid;\r\n        state.question = question.q;\r\n        state.category = question.c;\r\n        if (question.t == 'boolean') {\r\n            //always True then False in the choices\r\n            state.choices = ['True', 'False']\r\n        }\r\n        else {\r\n            //sort the choices alphabetically\r\n            state.choices = [];\r\n            state.choices.push(question.a);\r\n            for (let i = 0; i < question.i.length; i++) {\r\n                state.choices.push(question.i[i]);\r\n            }\r\n            state.choices.sort();\r\n        }\r\n        //save this question in _history to avoid choosing again\r\n        state._history.push(_qid);\r\n    }\r\n\r\n    processWinners() {\r\n        let playerList = [];\r\n        let playerIds = [];\r\n        let players = cup.players();\r\n\r\n        //add player id into the player data\r\n        for (var id in players) {\r\n            players[id].id = id;\r\n            playerList.push(players[id]);\r\n        }\r\n\r\n        //sort all players by their score\r\n        playerList.sort((a, b) => {\r\n            return b.score - a.score;\r\n        })\r\n\r\n        //get the top 10 and rank them\r\n        let lastscore = null;\r\n        let winpos = 0;\r\n        let winners = [];\r\n        for (var i = 0; i < Math.min(playerList.length, 10); i++) {\r\n            let player = playerList[i];\r\n            if (lastscore != null && lastscore != player.score)\r\n                winpos++;\r\n            player.rank = winpos;\r\n            lastscore = player.score;\r\n            winners.push(player.id);\r\n        }\r\n\r\n\r\n        //remove id, so we don't send over network\r\n        for (var id in players) {\r\n            delete players[id]['id'];\r\n        }\r\n\r\n        let state = cup.state();\r\n        state.winners = winners;\r\n        cup.gameover(winners);\r\n    }\r\n\r\n    processCorrectAnswers() {\r\n        let players = cup.players();\r\n        let state = cup.state();\r\n        if (state.round <= 0)\r\n            return;\r\n\r\n        //award score for correct choices, remove score for wrong choices\r\n        for (var id in players) {\r\n            let player = players[id];\r\n            if (typeof player.choice == 'undefined' || player.choice == null || player.choice == -1)\r\n                continue;\r\n\r\n            let answer = questions[state._qid].a;\r\n            let userChoice = state.choices[player.choice];\r\n            if (answer == userChoice) {\r\n                player.score += 10;\r\n            }\r\n            else {\r\n                player.score -= 2;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new PopTrivia();\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import cup from './acosg';\r\nimport PopTrivia from './game';\r\n\r\n\r\n\r\ncup.on('gamestart', (action) => PopTrivia.onNewGame(action));\r\ncup.on('skip', (action) => PopTrivia.onSkip(action));\r\ncup.on('join', (action) => PopTrivia.onJoin(action));\r\ncup.on('leave', (action) => PopTrivia.onLeave(action));\r\ncup.on('pick', (action) => PopTrivia.onPick(action));\r\n\r\ncup.commit();"],"names":[],"sourceRoot":""}